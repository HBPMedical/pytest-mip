<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="6" time="165.080" timestamp="2023-11-12T07:00:01.497258" hostname="8527c35501f0"><testcase classname="test_public_mip.TestPublicMIP" name="test_login_and_accept_terms[https://hbpmip.link/]" time="28.745" /><testcase classname="test_public_mip.TestPublicMIP" name="test_data[https://hbpmip.link/]" time="23.974"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[name()='circle'][. = 'Left opercular part of the inferior frontal gyrus&#10;']&quot;}&#10;  (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;#0 0x55d0f82635e3 &lt;unknown&gt;&#10;#1 0x55d0f7f260b7 &lt;unknown&gt;&#10;#2 0x55d0f7f73f53 &lt;unknown&gt;&#10;#3 0x55d0f7f74051 &lt;unknown&gt;&#10;#4 0x55d0f7fb99c4 &lt;unknown&gt;&#10;#5 0x55d0f7f9af1d &lt;unknown&gt;&#10;#6 0x55d0f7fb6b3d &lt;unknown&gt;&#10;#7 0x55d0f7f9acc3 &lt;unknown&gt;&#10;#8 0x55d0f7f660e4 &lt;unknown&gt;&#10;#9 0x55d0f7f670ae &lt;unknown&gt;&#10;#10 0x55d0f8229ce1 &lt;unknown&gt;&#10;#11 0x55d0f822db7e &lt;unknown&gt;&#10;#12 0x55d0f82174b5 &lt;unknown&gt;&#10;#13 0x55d0f822e7d6 &lt;unknown&gt;&#10;#14 0x55d0f81fadbf &lt;unknown&gt;&#10;#15 0x55d0f8251748 &lt;unknown&gt;&#10;#16 0x55d0f8251917 &lt;unknown&gt;&#10;#17 0x55d0f8262773 &lt;unknown&gt;&#10;#18 0x7f722c248044 &lt;unknown&gt;">self = &lt;test_public_mip.TestPublicMIP object at 0x7f384c4e8310&gt;

    def test_data(self):
        """Integration tests (data) of the public MIP."""
&gt;       super().test_data()

test_public_mip.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
basetest.py:106: in test_data
    left_opercular_part_of_the_inferior_f_ = selenium_driver.find_element(
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f384c4c9970&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x55d0f8251917 \\u003Cunknown&gt;\\n#17 0x55d0f8262773 \\u003Cunknown&gt;\\n#18 0x7f722c248044 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[name()='circle'][. = 'Left opercular part of the inferior frontal gyrus
E       ']"}
E         (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x55d0f82635e3 &lt;unknown&gt;
E       #1 0x55d0f7f260b7 &lt;unknown&gt;
E       #2 0x55d0f7f73f53 &lt;unknown&gt;
E       #3 0x55d0f7f74051 &lt;unknown&gt;
E       #4 0x55d0f7fb99c4 &lt;unknown&gt;
E       #5 0x55d0f7f9af1d &lt;unknown&gt;
E       #6 0x55d0f7fb6b3d &lt;unknown&gt;
E       #7 0x55d0f7f9acc3 &lt;unknown&gt;
E       #8 0x55d0f7f660e4 &lt;unknown&gt;
E       #9 0x55d0f7f670ae &lt;unknown&gt;
E       #10 0x55d0f8229ce1 &lt;unknown&gt;
E       #11 0x55d0f822db7e &lt;unknown&gt;
E       #12 0x55d0f82174b5 &lt;unknown&gt;
E       #13 0x55d0f822e7d6 &lt;unknown&gt;
E       #14 0x55d0f81fadbf &lt;unknown&gt;
E       #15 0x55d0f8251748 &lt;unknown&gt;
E       #16 0x55d0f8251917 &lt;unknown&gt;
E       #17 0x55d0f8262773 &lt;unknown&gt;
E       #18 0x7f722c248044 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException</failure></testcase><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_login_and_accept_terms[https://qa.hbpmip.link/]" time="28.551" /><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_data[https://qa.hbpmip.link/]" time="23.636"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#default-synth_mh_wk3&quot;}&#10;  (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;#0 0x558f0f2025e3 &lt;unknown&gt;&#10;#1 0x558f0eec50b7 &lt;unknown&gt;&#10;#2 0x558f0ef12f53 &lt;unknown&gt;&#10;#3 0x558f0ef13051 &lt;unknown&gt;&#10;#4 0x558f0ef589c4 &lt;unknown&gt;&#10;#5 0x558f0ef39f1d &lt;unknown&gt;&#10;#6 0x558f0ef55b3d &lt;unknown&gt;&#10;#7 0x558f0ef39cc3 &lt;unknown&gt;&#10;#8 0x558f0ef050e4 &lt;unknown&gt;&#10;#9 0x558f0ef060ae &lt;unknown&gt;&#10;#10 0x558f0f1c8ce1 &lt;unknown&gt;&#10;#11 0x558f0f1ccb7e &lt;unknown&gt;&#10;#12 0x558f0f1b64b5 &lt;unknown&gt;&#10;#13 0x558f0f1cd7d6 &lt;unknown&gt;&#10;#14 0x558f0f199dbf &lt;unknown&gt;&#10;#15 0x558f0f1f0748 &lt;unknown&gt;&#10;#16 0x558f0f1f0917 &lt;unknown&gt;&#10;#17 0x558f0f201773 &lt;unknown&gt;&#10;#18 0x7f94ff3fc044 &lt;unknown&gt;">self = &lt;test_qa_federation.TestMIPQAFederation object at 0x7f384d5353a0&gt;

    def test_data(self):
        """Integration tests (data) of the MIP QA Federation."""
&gt;       super().test_data()

test_qa_federation.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
basetest.py:88: in test_data
    default_synth_mh_wk3 = selenium_driver.find_element(
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f384d270f10&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x558f0f1f0917 \\u003Cunknown&gt;\\n#17 0x558f0f201773 \\u003Cunknown&gt;\\n#18 0x7f94ff3fc044 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":"#default-synth_mh_wk3"}
E         (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x558f0f2025e3 &lt;unknown&gt;
E       #1 0x558f0eec50b7 &lt;unknown&gt;
E       #2 0x558f0ef12f53 &lt;unknown&gt;
E       #3 0x558f0ef13051 &lt;unknown&gt;
E       #4 0x558f0ef589c4 &lt;unknown&gt;
E       #5 0x558f0ef39f1d &lt;unknown&gt;
E       #6 0x558f0ef55b3d &lt;unknown&gt;
E       #7 0x558f0ef39cc3 &lt;unknown&gt;
E       #8 0x558f0ef050e4 &lt;unknown&gt;
E       #9 0x558f0ef060ae &lt;unknown&gt;
E       #10 0x558f0f1c8ce1 &lt;unknown&gt;
E       #11 0x558f0f1ccb7e &lt;unknown&gt;
E       #12 0x558f0f1b64b5 &lt;unknown&gt;
E       #13 0x558f0f1cd7d6 &lt;unknown&gt;
E       #14 0x558f0f199dbf &lt;unknown&gt;
E       #15 0x558f0f1f0748 &lt;unknown&gt;
E       #16 0x558f0f1f0917 &lt;unknown&gt;
E       #17 0x558f0f201773 &lt;unknown&gt;
E       #18 0x7f94ff3fc044 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException</failure></testcase><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_login_and_accept_terms[https://stroke.hbpmip.link/]" time="28.665" /><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_data[https://stroke.hbpmip.link/]" time="30.685"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//div[contains(@id,'bar-graph-nihss-24h')]&quot;}&#10;  (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;#0 0x555f36d3b5e3 &lt;unknown&gt;&#10;#1 0x555f369fe0b7 &lt;unknown&gt;&#10;#2 0x555f36a4bf53 &lt;unknown&gt;&#10;#3 0x555f36a4c051 &lt;unknown&gt;&#10;#4 0x555f36a919c4 &lt;unknown&gt;&#10;#5 0x555f36a72f1d &lt;unknown&gt;&#10;#6 0x555f36a8eb3d &lt;unknown&gt;&#10;#7 0x555f36a72cc3 &lt;unknown&gt;&#10;#8 0x555f36a3e0e4 &lt;unknown&gt;&#10;#9 0x555f36a3f0ae &lt;unknown&gt;&#10;#10 0x555f36d01ce1 &lt;unknown&gt;&#10;#11 0x555f36d05b7e &lt;unknown&gt;&#10;#12 0x555f36cef4b5 &lt;unknown&gt;&#10;#13 0x555f36d067d6 &lt;unknown&gt;&#10;#14 0x555f36cd2dbf &lt;unknown&gt;&#10;#15 0x555f36d29748 &lt;unknown&gt;&#10;#16 0x555f36d29917 &lt;unknown&gt;&#10;#17 0x555f36d3a773 &lt;unknown&gt;&#10;#18 0x7f76eed65044 &lt;unknown&gt;">self = &lt;test_stroke_federation.TestStrokeMIP object at 0x7f384c4c9820&gt;

    def test_data(self):
        """Integration tests (data) of the Stroke (FERES) MIP."""
        selenium_driver = self.driver
    
        # 1. Click 'Datasets'
        datasets = selenium_driver.find_element(By.CSS_SELECTOR, "#dropdown-basic")
        datasets.click()
    
        # 2. Disable and enable again 'default-unibas'
        time.sleep(3)
        default_unibas_wk = selenium_driver.find_element(
            By.CSS_SELECTOR, "#default-unibas"
        )
        default_unibas_wk.click()
        default_unibas_wk.click()
    
        # 3. Click 'age'
        age = selenium_driver.find_element(
            By.XPATH,
            "//*[name()='circle'][590]",
        )
        age.click()
    
        # 4. Is the div containing the histogram of 'age' generated?
        histogram_of_age = selenium_driver.find_element(
            By.XPATH,
            "//div[contains(@id,'bar-graph-age')]",
        )
        assert histogram_of_age
    
        # 5. Click 'nihss 24h'
        nihss_24h = selenium_driver.find_element(
            By.XPATH,
            "//*[name()='circle'][499]",
        )
        nihss_24h.click()
    
        # 6. Is the div containing the histogram of 'nihss 24h' generated?
&gt;       histogram_of_nihss_24h = selenium_driver.find_element(
            By.XPATH,
            "//div[contains(@id,'bar-graph-nihss-24h')]",
        )

test_stroke_federation.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f384c363100&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x555f36d29917 \\u003Cunknown&gt;\\n#17 0x555f36d3a773 \\u003Cunknown&gt;\\n#18 0x7f76eed65044 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[contains(@id,'bar-graph-nihss-24h')]"}
E         (Session info: headless chrome=119.0.6045.105); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x555f36d3b5e3 &lt;unknown&gt;
E       #1 0x555f369fe0b7 &lt;unknown&gt;
E       #2 0x555f36a4bf53 &lt;unknown&gt;
E       #3 0x555f36a4c051 &lt;unknown&gt;
E       #4 0x555f36a919c4 &lt;unknown&gt;
E       #5 0x555f36a72f1d &lt;unknown&gt;
E       #6 0x555f36a8eb3d &lt;unknown&gt;
E       #7 0x555f36a72cc3 &lt;unknown&gt;
E       #8 0x555f36a3e0e4 &lt;unknown&gt;
E       #9 0x555f36a3f0ae &lt;unknown&gt;
E       #10 0x555f36d01ce1 &lt;unknown&gt;
E       #11 0x555f36d05b7e &lt;unknown&gt;
E       #12 0x555f36cef4b5 &lt;unknown&gt;
E       #13 0x555f36d067d6 &lt;unknown&gt;
E       #14 0x555f36cd2dbf &lt;unknown&gt;
E       #15 0x555f36d29748 &lt;unknown&gt;
E       #16 0x555f36d29917 &lt;unknown&gt;
E       #17 0x555f36d3a773 &lt;unknown&gt;
E       #18 0x7f76eed65044 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException</failure></testcase></testsuite></testsuites>