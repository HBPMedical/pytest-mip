<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="6" time="122.938" timestamp="2023-07-10T07:00:15.603554" hostname="921c6a25e2e5"><testcase classname="test_public_mip.TestPublicMIP" name="test_login_and_accept_terms[https://hbpmip.link/]" time="27.061" /><testcase classname="test_public_mip.TestPublicMIP" name="test_data[https://hbpmip.link/]" time="20.242" /><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_login_and_accept_terms[https://qa.hbpmip.link/]" time="9.175" /><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_data[https://qa.hbpmip.link/]" time="29.246"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//div[contains(@id,'bar-graph-right-transverse-temporal-gyrus')]&quot;}&#10;  (Session info: headless chrome=114.0.5735.198)&#10;Stacktrace:&#10;#0 0x561e2b8644e3 &lt;unknown&gt;&#10;#1 0x561e2b593c76 &lt;unknown&gt;&#10;#2 0x561e2b5cfc96 &lt;unknown&gt;&#10;#3 0x561e2b5cfdc1 &lt;unknown&gt;&#10;#4 0x561e2b6097f4 &lt;unknown&gt;&#10;#5 0x561e2b5ef03d &lt;unknown&gt;&#10;#6 0x561e2b60730e &lt;unknown&gt;&#10;#7 0x561e2b5eede3 &lt;unknown&gt;&#10;#8 0x561e2b5c42dd &lt;unknown&gt;&#10;#9 0x561e2b5c534e &lt;unknown&gt;&#10;#10 0x561e2b8243e4 &lt;unknown&gt;&#10;#11 0x561e2b8283d7 &lt;unknown&gt;&#10;#12 0x561e2b832b20 &lt;unknown&gt;&#10;#13 0x561e2b829023 &lt;unknown&gt;&#10;#14 0x561e2b7f71aa &lt;unknown&gt;&#10;#15 0x561e2b84d6b8 &lt;unknown&gt;&#10;#16 0x561e2b84d847 &lt;unknown&gt;&#10;#17 0x561e2b85d243 &lt;unknown&gt;&#10;#18 0x7fe658f9dfd4 &lt;unknown&gt;">self = &lt;test_qa_federation.TestMIPQAFederation object at 0x7f70910abd00&gt;

    def test_data(self):
        """Integration tests (data) of the MIP QA Federation."""
&gt;       super().test_data()

test_qa_federation.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
basetest.py:168: in test_data
    histogram_of_rightttgtransversetempor_ = selenium_driver.find_element(
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:830: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f709103b5e0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x561e2b84d847 \\u003Cunknown&gt;\\n#17 0x561e2b85d243 \\u003Cunknown&gt;\\n#18 0x7fe658f9dfd4 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[contains(@id,'bar-graph-right-transverse-temporal-gyrus')]"}
E         (Session info: headless chrome=114.0.5735.198)
E       Stacktrace:
E       #0 0x561e2b8644e3 &lt;unknown&gt;
E       #1 0x561e2b593c76 &lt;unknown&gt;
E       #2 0x561e2b5cfc96 &lt;unknown&gt;
E       #3 0x561e2b5cfdc1 &lt;unknown&gt;
E       #4 0x561e2b6097f4 &lt;unknown&gt;
E       #5 0x561e2b5ef03d &lt;unknown&gt;
E       #6 0x561e2b60730e &lt;unknown&gt;
E       #7 0x561e2b5eede3 &lt;unknown&gt;
E       #8 0x561e2b5c42dd &lt;unknown&gt;
E       #9 0x561e2b5c534e &lt;unknown&gt;
E       #10 0x561e2b8243e4 &lt;unknown&gt;
E       #11 0x561e2b8283d7 &lt;unknown&gt;
E       #12 0x561e2b832b20 &lt;unknown&gt;
E       #13 0x561e2b829023 &lt;unknown&gt;
E       #14 0x561e2b7f71aa &lt;unknown&gt;
E       #15 0x561e2b84d6b8 &lt;unknown&gt;
E       #16 0x561e2b84d847 &lt;unknown&gt;
E       #17 0x561e2b85d243 &lt;unknown&gt;
E       #18 0x7fe658f9dfd4 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:245: NoSuchElementException</failure></testcase><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_login_and_accept_terms[https://stroke.hbpmip.link/]" time="26.559" /><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_data[https://stroke.hbpmip.link/]" time="10.160" /></testsuite></testsuites>