<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="6" time="147.805" timestamp="2024-02-24T06:59:40.168881" hostname="eeaa9aa4fe44"><testcase classname="test_public_mip.TestPublicMIP" name="test_login_and_accept_terms[https://hbpmip.link/]" time="27.629" /><testcase classname="test_public_mip.TestPublicMIP" name="test_data[https://hbpmip.link/]" time="23.987"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[name()='circle'][. = 'Left opercular part of the inferior frontal gyrus&#10;']&quot;}&#10;  (Session info: chrome-headless-shell=121.0.6167.184); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;#0 0x55b477b7a303 &lt;unknown&gt;&#10;#1 0x55b47785f2b7 &lt;unknown&gt;&#10;#2 0x55b4778aacc0 &lt;unknown&gt;&#10;#3 0x55b4778aadb1 &lt;unknown&gt;&#10;#4 0x55b4778eeb44 &lt;unknown&gt;&#10;#5 0x55b4778cd3ad &lt;unknown&gt;&#10;#6 0x55b4778ec07c &lt;unknown&gt;&#10;#7 0x55b4778cd123 &lt;unknown&gt;&#10;#8 0x55b47789d095 &lt;unknown&gt;&#10;#9 0x55b47789e09e &lt;unknown&gt;&#10;#10 0x55b477b3e6ab &lt;unknown&gt;&#10;#11 0x55b477b424ba &lt;unknown&gt;&#10;#12 0x55b477b2af85 &lt;unknown&gt;&#10;#13 0x55b477b4312f &lt;unknown&gt;&#10;#14 0x55b477b0ee6f &lt;unknown&gt;&#10;#15 0x55b477b675f8 &lt;unknown&gt;&#10;#16 0x55b477b677c2 &lt;unknown&gt;&#10;#17 0x55b477b794a4 &lt;unknown&gt;&#10;#18 0x7f2435e5b134 &lt;unknown&gt;">self = &lt;test_public_mip.TestPublicMIP object at 0x7fe518921490&gt;

    def test_data(self):
        """Integration tests (data) of the public MIP."""
&gt;       super().test_data()

test_public_mip.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
basetest.py:106: in test_data
    left_opercular_part_of_the_inferior_f_ = selenium_driver.find_element(
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe5186816d0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x55b477b677c2 \\u003Cunknown&gt;\\n#17 0x55b477b794a4 \\u003Cunknown&gt;\\n#18 0x7f2435e5b134 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[name()='circle'][. = 'Left opercular part of the inferior frontal gyrus
E       ']"}
E         (Session info: chrome-headless-shell=121.0.6167.184); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x55b477b7a303 &lt;unknown&gt;
E       #1 0x55b47785f2b7 &lt;unknown&gt;
E       #2 0x55b4778aacc0 &lt;unknown&gt;
E       #3 0x55b4778aadb1 &lt;unknown&gt;
E       #4 0x55b4778eeb44 &lt;unknown&gt;
E       #5 0x55b4778cd3ad &lt;unknown&gt;
E       #6 0x55b4778ec07c &lt;unknown&gt;
E       #7 0x55b4778cd123 &lt;unknown&gt;
E       #8 0x55b47789d095 &lt;unknown&gt;
E       #9 0x55b47789e09e &lt;unknown&gt;
E       #10 0x55b477b3e6ab &lt;unknown&gt;
E       #11 0x55b477b424ba &lt;unknown&gt;
E       #12 0x55b477b2af85 &lt;unknown&gt;
E       #13 0x55b477b4312f &lt;unknown&gt;
E       #14 0x55b477b0ee6f &lt;unknown&gt;
E       #15 0x55b477b675f8 &lt;unknown&gt;
E       #16 0x55b477b677c2 &lt;unknown&gt;
E       #17 0x55b477b794a4 &lt;unknown&gt;
E       #18 0x7f2435e5b134 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException</failure></testcase><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_login_and_accept_terms[https://qa.hbpmip.link/]" time="26.188" /><testcase classname="test_qa_federation.TestMIPQAFederation" name="test_data[https://qa.hbpmip.link/]" time="23.595"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;css selector&quot;,&quot;selector&quot;:&quot;#default-synth_mh_wk3&quot;}&#10;  (Session info: chrome-headless-shell=121.0.6167.184); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception&#10;Stacktrace:&#10;#0 0x55d4f7265303 &lt;unknown&gt;&#10;#1 0x55d4f6f4a2b7 &lt;unknown&gt;&#10;#2 0x55d4f6f95cc0 &lt;unknown&gt;&#10;#3 0x55d4f6f95db1 &lt;unknown&gt;&#10;#4 0x55d4f6fd9b44 &lt;unknown&gt;&#10;#5 0x55d4f6fb83ad &lt;unknown&gt;&#10;#6 0x55d4f6fd707c &lt;unknown&gt;&#10;#7 0x55d4f6fb8123 &lt;unknown&gt;&#10;#8 0x55d4f6f88095 &lt;unknown&gt;&#10;#9 0x55d4f6f8909e &lt;unknown&gt;&#10;#10 0x55d4f72296ab &lt;unknown&gt;&#10;#11 0x55d4f722d4ba &lt;unknown&gt;&#10;#12 0x55d4f7215f85 &lt;unknown&gt;&#10;#13 0x55d4f722e12f &lt;unknown&gt;&#10;#14 0x55d4f71f9e6f &lt;unknown&gt;&#10;#15 0x55d4f72525f8 &lt;unknown&gt;&#10;#16 0x55d4f72527c2 &lt;unknown&gt;&#10;#17 0x55d4f72644a4 &lt;unknown&gt;&#10;#18 0x7f0c9b24a134 &lt;unknown&gt;">self = &lt;test_qa_federation.TestMIPQAFederation object at 0x7fe517896220&gt;

    def test_data(self):
        """Integration tests (data) of the MIP QA Federation."""
&gt;       super().test_data()

test_qa_federation.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
basetest.py:88: in test_data
    default_synth_mh_wk3 = selenium_driver.find_element(
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:739: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe517877e80&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\\n#16 0x55d4f72527c2 \\u003Cunknown&gt;\\n#17 0x55d4f72644a4 \\u003Cunknown&gt;\\n#18 0x7f0c9b24a134 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"css selector","selector":"#default-synth_mh_wk3"}
E         (Session info: chrome-headless-shell=121.0.6167.184); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       #0 0x55d4f7265303 &lt;unknown&gt;
E       #1 0x55d4f6f4a2b7 &lt;unknown&gt;
E       #2 0x55d4f6f95cc0 &lt;unknown&gt;
E       #3 0x55d4f6f95db1 &lt;unknown&gt;
E       #4 0x55d4f6fd9b44 &lt;unknown&gt;
E       #5 0x55d4f6fb83ad &lt;unknown&gt;
E       #6 0x55d4f6fd707c &lt;unknown&gt;
E       #7 0x55d4f6fb8123 &lt;unknown&gt;
E       #8 0x55d4f6f88095 &lt;unknown&gt;
E       #9 0x55d4f6f8909e &lt;unknown&gt;
E       #10 0x55d4f72296ab &lt;unknown&gt;
E       #11 0x55d4f722d4ba &lt;unknown&gt;
E       #12 0x55d4f7215f85 &lt;unknown&gt;
E       #13 0x55d4f722e12f &lt;unknown&gt;
E       #14 0x55d4f71f9e6f &lt;unknown&gt;
E       #15 0x55d4f72525f8 &lt;unknown&gt;
E       #16 0x55d4f72527c2 &lt;unknown&gt;
E       #17 0x55d4f72644a4 &lt;unknown&gt;
E       #18 0x7f0c9b24a134 &lt;unknown&gt;

/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException</failure></testcase><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_login_and_accept_terms[https://stroke.hbpmip.link/]" time="26.026" /><testcase classname="test_stroke_federation.TestStrokeMIP" name="test_data[https://stroke.hbpmip.link/]" time="19.860" /></testsuite></testsuites>